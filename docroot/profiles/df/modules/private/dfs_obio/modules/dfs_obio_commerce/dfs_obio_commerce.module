<?php

/**
 * @file
 * Commerce integration and configuration.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function dfs_obio_commerce_theme($existing, $type, $theme, $path) {
  return array(
    'dfs_obio_commerce_completion_message' => array(
      'variables' => array(
        'order' => NULL,
      ),
    ),
  );
}

function dfs_obio_commerce_preprocess(&$variables, $hook) {
  $variables['img_path'] = file_create_url(drupal_get_path('module', 'dfs_obio_commerce') . '/images/wendy.jpg');
}

/**
 * Prepares variables for OBIO completion message templates.
 *
 * Default template: dfs-obio-commerce-completion-message.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - order: The order object.
 */
function template_preprocess_dfs_obio_commerce_completion_message(&$variables) {
  /** @var Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $variables['order'];

  $variables['order_number'] = $order->getOrderNumber();
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function dfs_obio_commerce_block_view_commerce_cart_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  // Add a #pre_render callback to modify the cart build information before it
  // is rendered.
  $build['#pre_render'][] = 'dfs_obio_commerce_cart_pre_render';
}

/**
 * #pre_render callback: Alters the presentation of the Commerce cart block.
 */
function dfs_obio_commerce_cart_pre_render(array $build) {
  $count = $build['content']['#count'];

  // Change the empty cart text from 'Count 0' to 'Cart'.
  if ($count == 0) {
    $build['content']['#count_text'] = t('Cart');
  }

  // Replace the default cart icon with the ion equivalent.
  $build['content']['#icon'] = [
    '#markup' => '<span class="meta-icon-size"><i class="icon ion-ios-cart"></i></span>',
  ];

  return $build;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dfs_obio_commerce_form_commerce_checkout_flow_multistep_default_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Retrieve the ID of the current step.
  $step_id = $form['#step_id'];

  switch ($step_id) {
    case 'login':
      // When guest checkout is enabled, remove the default 'Continue to review'
      // button in order to simplify the login form as it duplicates the
      // 'Continue as Guest' button.
      if ($form_state->getFormObject()->getConfiguration()['panes']['login']['allow_guest_checkout']) {
        $form['actions']['next']['#access'] = FALSE;
      }

      // Add the ability for customers to login with social login providers
      // during the checkout process when the Social Login module is enabled.
      if (\Drupal::moduleHandler()->moduleExists('social_login') && isset($form['login']['returning_customer'])) {
        social_login_show_providers($form['login']['returning_customer'], $form_state, 'commerce_checkout_login');
      }
      break;

    case 'review':
      // Change the review step 'next' button text from 'Pay and complete purchase'
      // to 'Complete purchase'.
      $form['actions']['next']['#value'] = t('Complete purchase');
      break;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dfs_obio_commerce_form_commerce_order_item_add_to_cart_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add a custom submit handler to the collection 'Add to Cart' form.
  $form['actions']['submit']['#submit'][] = 'dfs_obio_commerce_commerce_order_item_add_to_cart_form_submit';
}

/**
 * Submit callback for the commerce 'Add to Cart' form which sets a redirect.
 */
function dfs_obio_commerce_commerce_order_item_add_to_cart_form_submit($form, FormStateInterface $form_state) {
  // Redirect users to the cart page after they've added a collection to their
  // cart.
  $form_state->setRedirect('commerce_cart.page');
}

/**
 * Implements hook_form_alter().
 *
 * @TODO:
 * - You should implement hook_form_BASE_FORM_ID_alter() instead of this
 *   general hook:
 *   dfs_obio_commerce_form_commerce_order_item_add_to_cart_form_alter().
 */
function dfs_obio_commerce_form_alter(&$form, FormStateInterface $form_state) {
  if (isset($form['#id']) && preg_match('/commerce-order-item.*add-to-cart.*form/', $form['#id'])) {
    $form['purchased_entity']['widget']['#after_build'][] = '_dfs_obio_commerce_process_add_to_cart_form';
    if (!empty($form['purchased_entity']['widget']) && is_array($form['purchased_entity']['widget'])) {
      $first_widget = &$form['purchased_entity']['widget'][0];
      // Attributes key exist only if the ProductVariationAttributes widget is
      // selected on form display ui.
      if (!empty($first_widget['attributes'])) {
        // Make ambiance package the second fieldset.
        $first_widget['attributes']['attribute_ambiance_package']['#weight'] = 1;
      }

      if (!empty($form['actions']['submit'])) {
        $form['actions']['submit']['#attached']['library'][] = 'dfs_obio_commerce/submit_replicate';
        $form['actions']['submit']['#attributes']['class'][] = 'visually-hidden';
        $form['actions']['submit']['#attributes']['data-replicate'] = '.dfs-obio-product-submit';
      }
    }
  }
}

/**
 * Process callback for the commerce "add to cart" form.
 *
 * @TODO:
 * - You should check which type of widget is used here before you do this
 *   alteration: widget could be changed on UI!
 */
function _dfs_obio_commerce_process_add_to_cart_form($element) {
  $element[0]['#prefix'] = '<div class="add-to-cart-form row">';
  $element[0]['#suffix'] = '</div>';
  // Attributes key exist only if the ProductVariationAttributes widget is
  // selected on form display ui.
  // We want to alter that widget only.
  if (!empty($element[0]['attributes'])) {
    if (!empty($element[0]['attributes']) && is_array($element[0]['attributes'])) {
      foreach (Element::children($element[0]['attributes'], FALSE) as $product_variation) {
        // Sadly, product variation (config) translation isn't applied here.
        // Because of that, maybe we may add the needed 'Select' prefix
        // temporarily...
        $element[0]['attributes'][$product_variation]['#title'] =
        'Select ' . $element[0]['attributes'][$product_variation]['#title'];

        // The followings alterations are frontend-specific, which means they
        // should be inside the theme, not here.
        //
        // Adding the needed frontend classes.
        $element[0]['attributes'][$product_variation]['#attributes']['class'][] = 'large-6';
        $element[0]['attributes'][$product_variation]['#attributes']['class'][] = 'columns';
      }
    }

    foreach ($element[0]['attributes']['attribute_ambiance_package']['#options'] as $key => $value) {
      $element[0]['attributes']['attribute_ambiance_package']['#options'][$key] .= ' :: ' . $key;
    }
  }
  return $element;
}
