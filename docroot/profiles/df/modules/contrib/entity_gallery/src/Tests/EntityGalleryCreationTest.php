<?php

namespace Drupal\entity_gallery\Tests;

use Drupal\Core\Database\Database;
use Drupal\Core\Language\LanguageInterface;
use Drupal\entity_gallery\Entity\EntityGallery;

/**
 * Create an entity gallery and test saving it.
 *
 * @group entity_gallery
 */
class EntityGalleryCreationTest extends EntityGalleryTestBase {

  /**
   * Modules to enable.
   *
   * Enable dummy module that implements hook_ENTITY_TYPE_insert() for
   * exceptions (function entity_gallery_test_exception_entity_gallery_insert() ).
   *
   * @var array
   */
  public static $modules = array('entity_gallery_test_exception', 'dblog', 'test_page_test');

  protected function setUp() {
    parent::setUp();

    $web_user = $this->drupalCreateUser(array('create page entity galleries', 'edit own page entity galleries'));
    $this->drupalLogin($web_user);
  }

  /**
   * Creates a "Basic page" entity gallery and verifies its consistency in the
   * database.
   */
  function testEntityGalleryCreation() {
    $entity_gallery_type_storage = \Drupal::entityManager()->getStorage('entity_gallery_type');

    // Test /gallery/add page with only one entity gallery type.
    $entity_gallery_type_storage->load('article')->delete();
    $this->drupalGet('gallery/add');
    $this->assertResponse(200);
    $this->assertUrl('gallery/add/page');
    // Create an entity gallery.
    $edit = array();
    $edit['title[0][value]'] = $this->randomMachineName(8);
    $edit['entity_gallery_node[0][target_id]'] = $this->drupalCreateNode()->label();
    $this->drupalPostForm('gallery/add/page', $edit, t('Save'));

    // Check that the Basic page has been created.
    $this->assertText(t('@post @title has been created.', array('@post' => 'Basic page', '@title' => $edit['title[0][value]'])), 'Basic page created.');

    // Verify that the creation message contains a link to an entity gallery.
    $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', array(':href' => 'gallery/'));
    $this->assert(isset($view_link), 'The message area contains a link to an entity gallery');

    // Check that the entity gallery exists in the database.
    $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit['title[0][value]']);
    $this->assertTrue($entity_gallery, 'Entity gallery found in database.');

    // Verify that pages do not show submitted information by default.
    $this->drupalGet('gallery/' . $entity_gallery->id());
    $this->assertNoText($entity_gallery->getOwner()->getUsername());
    $this->assertNoText(format_date($entity_gallery->getCreatedTime()));

    // Change the entity gallery type setting to show submitted by information.
    /** @var \Drupal\entity_gallery\EntityGalleryTypeInterface $entity_gallery_type */
    $entity_gallery_type = $entity_gallery_type_storage->load('page');
    $entity_gallery_type->setDisplaySubmitted(TRUE);
    $entity_gallery_type->save();

    $this->drupalGet('gallery/' . $entity_gallery->id());
    $this->assertText($entity_gallery->getOwner()->getUsername());
    $this->assertText(format_date($entity_gallery->getCreatedTime()));
  }

  /**
   * Verifies that a transaction rolls back the failed creation.
   */
  function testFailedPageCreation() {
    // Create an entity gallery.
    $edit = array(
      'uid'      => $this->loggedInUser->id(),
      'name'     => $this->loggedInUser->name,
      'type'     => 'page',
      'langcode' => LanguageInterface::LANGCODE_NOT_SPECIFIED,
      'title'    => 'testing_transaction_exception',
    );

    try {
      // An exception is generated by
      // entity_gallery_test_exception_entity_gallery_insert() if the title is
      // 'testing_transaction_exception'.
      EntityGallery::create($edit)->save();
      $this->fail(t('Expected exception has not been thrown.'));
    }
    catch (\Exception $e) {
      $this->pass(t('Expected exception has been thrown.'));
    }

    if (Database::getConnection()->supportsTransactions()) {
      // Check that the entity gallery does not exist in the database.
      $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit['title']);
      $this->assertFalse($entity_gallery, 'Transactions supported, and entity gallery not found in database.');
    }
    else {
      // Check that the entity gallery exists in the database.
      $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit['title']);
      $this->assertTrue($entity_gallery, 'Transactions not supported, and entity gallery found in database.');

      // Check that the failed rollback was logged.
      $records = static::getWatchdogIdsForFailedExplicitRollback();
      $this->assertTrue(count($records) > 0, 'Transactions not supported, and rollback error logged to watchdog.');
    }

    // Check that the rollback error was logged.
    $records = static::getWatchdogIdsForTestExceptionRollback();
    $this->assertTrue(count($records) > 0, 'Rollback explanatory error logged to watchdog.');
  }

  /**
   * Creates an unpublished entity gallery and confirms correct redirect
   * behavior.
   */
  function testUnpublishedEntityGalleryCreation() {
    // Set the front page to the test page.
    $this->config('system.site')->set('page.front', '/test-page')->save();

    // Set "Basic page" entity gallery type to be unpublished by default.
    $fields = \Drupal::entityManager()->getFieldDefinitions('entity_gallery', 'page');
    $fields['status']->getConfig('page')
      ->setDefaultValue(FALSE)
      ->save();

    // Create an entity gallery.
    $edit = array();
    $edit['title[0][value]'] = $this->randomMachineName(8);
    $edit['entity_gallery_node[0][target_id]'] = $this->drupalCreateNode()->label();
    $this->drupalPostForm('gallery/add/page', $edit, t('Save'));

    // Check that the user was redirected to the home page.
    $this->assertUrl('');
    $this->assertText(t('Test page text'));

    // Confirm that the entity gallery was created.
    $this->assertText(t('@post @title has been created.', array('@post' => 'Basic page', '@title' => $edit['title[0][value]'])));

    // Verify that the creation message contains a link to an entity gallery.
    $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', array(':href' => 'gallery/'));
    $this->assert(isset($view_link), 'The message area contains a link to an entity gallery');
  }

  /**
   * Tests the author autocompletion textfield.
   */
  public function testAuthorAutocomplete() {
    $admin_user = $this->drupalCreateUser(array('administer entity galleries', 'create page entity galleries'));
    $this->drupalLogin($admin_user);

    $this->drupalGet('gallery/add/page');

    $result = $this->xpath('//input[@id="edit-uid-0-value" and contains(@data-autocomplete-path, "user/autocomplete")]');
    $this->assertEqual(count($result), 0, 'No autocompletion without access user profiles.');

    $admin_user = $this->drupalCreateUser(array('administer entity galleries', 'create page entity galleries', 'access user profiles'));
    $this->drupalLogin($admin_user);

    $this->drupalGet('gallery/add/page');

    $result = $this->xpath('//input[@id="edit-uid-0-target-id" and contains(@data-autocomplete-path, "/entity_reference_autocomplete/user/default")]');
    $this->assertEqual(count($result), 1, 'Ensure that the user does have access to the autocompletion');
  }

  /**
   * Check gallery/add when no entity gallery types exist.
   */
  function testEntityGalleryAddWithoutEntityGalleryTypes() {
    $this->drupalGet('gallery/add');
    $this->assertResponse(200);
    $this->assertNoLinkByHref('/admin/structure/gallery-types/add');

    // Test /gallery/add page without entity gallery types.
    foreach (\Drupal::entityManager()->getStorage('entity_gallery_type')->loadMultiple() as $entity ) {
      $entity->delete();
    }

    $this->drupalGet('gallery/add');
    $this->assertResponse(403);

    $admin_entity_gallery_types = $this->drupalCreateUser(array('administer entity gallery types'));
    $this->drupalLogin($admin_entity_gallery_types);

    $this->drupalGet('gallery/add');

    $this->assertLinkByHref('/admin/structure/gallery-types/add');
  }

  /**
   * Gets the watchdog IDs of the records with the rollback exception message.
   *
   * @return int[]
   *   Array containing the IDs of the log records with the rollback exception
   *   message.
   */
  protected static function getWatchdogIdsForTestExceptionRollback() {
    // PostgreSQL doesn't support bytea LIKE queries, so we need to unserialize
    // first to check for the rollback exception message.
    $matches = array();
    $query = db_query("SELECT wid, variables FROM {watchdog}");
    foreach ($query as $row) {
      $variables = (array) unserialize($row->variables);
      if (isset($variables['@message']) && $variables['@message'] === 'Test exception for rollback.') {
        $matches[] = $row->wid;
      }
    }
    return $matches;
  }

  /**
   * Gets the log records with the explicit rollback failed exception message.
   *
   * @return \Drupal\Core\Database\StatementInterface
   *   A prepared statement object (already executed), which contains the log
   *   records with the explicit rollback failed exception message.
   */
  protected static function getWatchdogIdsForFailedExplicitRollback() {
    return db_query("SELECT wid FROM {watchdog} WHERE message LIKE 'Explicit rollback failed%'")->fetchAll();
  }

}
